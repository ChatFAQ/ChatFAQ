from django.contrib import admin, messages
from django.db.models import Q
from simple_history.admin import SimpleHistoryAdmin

from back.apps.language_model.tasks import (
    generate_intents_task,
    generate_suggested_intents_task,
    test_task,
)

from .forms import DataSourceForm
from .models.data import (
    AutoGeneratedTitle,
    DataSource,
    Embedding,
    Intent,
    KnowledgeBase,
    KnowledgeItem,
    KnowledgeItemImage,
    MessageKnowledgeItem,
)
from .models.rag_pipeline import (
    GenerationConfig,
    LLMConfig,
    PromptConfig,
    RetrieverConfig,
)


class KnowledgeItemAdmin(admin.ModelAdmin):
    list_display = ["content", "url"]
    list_filter = ["knowledge_base"]
    search_fields = ["title", "content", "url", "metadata"]
    readonly_fields = ('data_source',)


class KnowledgeItemImageAdmin(admin.ModelAdmin):
    search_fields = [
        "knowledge_item__title",
        "knowledge_item__content",
        "image_caption",
    ]
    list_filter = ["knowledge_item__knowledge_base"]


class DataSourceAdmin(admin.ModelAdmin):
    form = DataSourceForm


class DataSourceInline(admin.TabularInline):
    model = DataSource
    extra = 0

    def has_add_permission(self, request, obj=None):
        return False

    def has_delete_permission(self, request, obj=None):
        return False

    def has_change_permission(self, request, obj=None):
        return False


def run_generate_intents_task(modeladmin, request, queryset):
    for kb in queryset:
        task_name = f"generate_intents_{kb.name}"
        print(f"Submitting the {task_name} task to the Ray cluster...")
        generate_intents_task.options(name=task_name).remote(kb.id)
        modeladmin.message_user(
            request, "Generate intents task started", messages.SUCCESS
        )


run_generate_intents_task.short_description = (
    "Generate existing intents for a knowledge base"
)


def run_generate_suggested_intents_task(modeladmin, request, queryset):
    for kb in queryset:
        task_name = f"generate_suggested_intents_{kb.name}"
        print(f"Submitting the {task_name} task to the Ray cluster...")
        generate_suggested_intents_task.options(name=task_name).remote(kb.id, _generate_titles=True)
        modeladmin.message_user(
            request, "Generate suggested intents task started", messages.SUCCESS
        )


run_generate_suggested_intents_task.short_description = (
    "Generate suggested intents for a knowledge base"
)


class KnowledgeBaseAdmin(admin.ModelAdmin):
    model = KnowledgeBase
    inlines = [
        DataSourceInline,
    ]
    actions = [run_generate_intents_task, run_generate_suggested_intents_task]


class AutoGeneratedTitleAdmin(admin.ModelAdmin):
    list_display = ["knowledge_item_id", "title"]
    list_filter = ["knowledge_item__knowledge_base"]


# Custom filter for KnowledgeBase
class KnowledgeBaseFilter(admin.SimpleListFilter):
    title = "knowledge base"
    parameter_name = "knowledge_base"

    def lookups(self, request, model_admin):
        # Return a list of tuples. The first element in each tuple is the coded value
        # for the option that will appear in the URL query. The second element is the
        # human-readable name for the option that will appear in the right sidebar.
        knowledge_bases = KnowledgeBase.objects.all()
        return [(kb.id, kb.name) for kb in knowledge_bases]

    def queryset(self, request, queryset):
        # Filter the queryset based on the value provided in the query string.
        if self.value():
            return queryset.filter(
                Q(knowledge_item__knowledge_base=self.value())
                | Q(
                    message__messageknowledgeitem__knowledge_item__knowledge_base=self.value()
                )
            ).distinct()
        return queryset


class IntentAdmin(admin.ModelAdmin):
    list_display = ["intent_name", "suggested_intent", "auto_generated"]
    list_filter = ["suggested_intent", KnowledgeBaseFilter]

    def get_readonly_fields(self, request, obj=None):
        return ["auto_generated", "suggested_intent", "message", "knowledge_item"]


def run_index_task(modeladmin, request, queryset):
    for retriever_config in queryset:
        retriever_config.trigger_reindex()
        modeladmin.message_user(
            request, f"Index task started for {retriever_config.name}", messages.SUCCESS
        )


run_index_task.short_description = "Index selected Retriever configs"


def run_retriever_deploy_task(modeladmin, request, queryset):
    for retriever_config in queryset:
        retriever_config.trigger_deploy()
        modeladmin.message_user(
            request, f"Deploy task started for {retriever_config.name}", messages.SUCCESS
        )


run_retriever_deploy_task.short_description = "Deploy selected Retriever configs"


def run_test_task(modeladmin, request, queryset):
    test_task.remote("test argument")
    modeladmin.message_user(request, "Test task started", messages.SUCCESS)


run_test_task.short_description = "Run test task"


class RetrieverConfigAdmin(SimpleHistoryAdmin):
    list_display = ["name", "enabled", "index_status"]
    list_filter = ["enabled", "index_status"]

    actions = [run_index_task, run_retriever_deploy_task, run_test_task]

    def get_readonly_fields(self, request, obj=None):
        # This makes 'index_status' readonly in all cases
        return self.readonly_fields + (
            "index_status",
            "s3_index_path",
        )

class LLMConfigAdmin(SimpleHistoryAdmin):
    list_display = ["name", "enabled"]
    list_filter = ["enabled"]


class MessageKnowledgeItemAdmin(admin.ModelAdmin):
    list_display = ["message_id", "knowledge_item_id", "similarity", "valid"]
    list_filter = ["knowledge_item__knowledge_base"]
    ordering = ["message_id"]


admin.site.register(KnowledgeBase, KnowledgeBaseAdmin)
admin.site.register(KnowledgeItem, KnowledgeItemAdmin)
admin.site.register(KnowledgeItemImage, KnowledgeItemImageAdmin)
admin.site.register(AutoGeneratedTitle, AutoGeneratedTitleAdmin)
admin.site.register(LLMConfig, LLMConfigAdmin)
admin.site.register(PromptConfig, SimpleHistoryAdmin)
admin.site.register(GenerationConfig, SimpleHistoryAdmin)
admin.site.register(RetrieverConfig, RetrieverConfigAdmin)
admin.site.register(Embedding)
admin.site.register(DataSource, DataSourceAdmin)
admin.site.register(Intent, IntentAdmin)
admin.site.register(MessageKnowledgeItem, MessageKnowledgeItemAdmin)
