name: Build, Push and Deploy to ECS on DEV

on:
    push:
        # paths:
        #     - "back/**"
        #     - "widget/**"
        #     - "sdk/**"
    
        tags:
        - "v*.*.*-dev"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  default:
    strategy:
        fail-fast: false
        matrix:
            target-folder:
                [
                "back",
                "widget",
                "sdk"
                ]
    runs-on: ubuntu-latest
    environment: dev
    
    name: Build Image, Push to ECR, Deploy to ECS

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: filter path
        uses: dorny/paths-filter@v2
        id: filter
        with:
            filters: |
              folder:
                - './${{ matrix.target-folder }}/**'
      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::756378459524:role/GithubDeployRole
          #{{ vars.AWS_ACCOUNT_ID }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC_for_${{ matrix.target-folder }}
          aws-region: ${{ vars.AWS_REGION }}
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ vars.AWS_ECR_ACCOUNT_ID }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ./${{ matrix.target-folder }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.ref_name }}
          DOCKER_TAG_TO_DEPLOY: ${{ vars.DOCKER_TAG_TO_DEPLOY }}
          ECR_REPOSITORY: "chatfaq-${{ matrix.target-folder }}"
        #"steps.filter.outputs.folder == 'true'
        run: |
          # Build a docker container and apply two tags
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_TAG_TO_DEPLOY -f Dockerfile .
          # Push both tags to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_TAG_TO_DEPLOY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
      - name: Fetch latest task definition if back for migrate
        id: get-last-def-migrate
        run: |
          if [[ "${{ matrix.target-folder }}" == "back" ]]; then
            latest_task_def=$(aws ecs list-task-definitions --family-prefix chatfaq-${{ matrix.target-folder }}-migrate --sort DESC --max-items 1 | jq -r ".taskDefinitionArns[0]")
            echo $latest_task_def
            aws ecs describe-task-definition --task-definition $latest_task_def --query taskDefinition > task-definition-migrate.json
            cat task-definition-migrate.json
            echo "::set-output name=exists::true"
          fi
          exit 0 

      - name: Fill in the new image ID in the Amazon ECS task definition if back for migrate
        if: steps.get-last-def-migrate.outputs.exists == 'true'
        id: task-def-migrate
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-migrate.json
          container-name: main
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition for migrate
        id: task-def-new-version-migrate
        if: steps.get-last-def-migrate.outputs.exists == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-migrate.outputs.task-definition }}
          cluster: ${{ vars.ECS_CLUSTER_NAME }}
      
      - name: Run ECS Task for migrate
        if: steps.get-last-def-migrate.outputs.exists == 'true'
        uses: researchsquare/run-ecs-task-action@v1
        with:
          task-definition-arn: ${{ steps.task-def-new-version-migrate.outputs.task-definition-arn }}
          cluster: ${{ vars.ECS_CLUSTER_NAME }}
          #wait-for-task-completion: true
          count: 1
      
      
      
      - name: Fetch latest task definition
        run: |
          latest_task_def=$(aws ecs list-task-definitions --family-prefix chatfaq-${{ matrix.target-folder }} --sort DESC --max-items 1 | jq -r ".taskDefinitionArns[0]")
          echo $latest_task_def
          aws ecs describe-task-definition --task-definition $latest_task_def --query taskDefinition > task-definition.json
          cat task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: main
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: ${{ vars.ECS_CLUSTER_NAME }}
          service: chatfaq-${{ matrix.target-folder }}-service
          wait-for-service-stability: false